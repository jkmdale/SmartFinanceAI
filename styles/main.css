// SmartFinanceAI CSS Auto-Injector
// Add this ONE script to pages that need styling
// Save as: src/utils/css-injector.js

(function() {
    'use strict';
    
    // Check if CSS is already loaded
    if (document.querySelector('link[href*="main.css"]')) {
        return; // Already loaded
    }
    
    // Determine correct path based on current location
    function getCSSPath() {
        const currentPath = window.location.pathname;
        
        // Root level (index.html)
        if (currentPath === '/' || currentPath.endsWith('index.html')) {
            return 'src/styles/main.css';
        }
        
        // In src/ subdirectories
        if (currentPath.includes('/src/')) {
            return '../styles/main.css';
        }
        
        // Default fallback
        return 'src/styles/main.css';
    }
    
    // Create and inject CSS link
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = getCSSPath();
    link.type = 'text/css';
    
    // Add loading and error handling
    link.onload = function() {
        console.log('✅ SmartFinanceAI CSS loaded successfully');
        // Add fade-in animation to body
        document.body.style.opacity = '0';
        document.body.style.transition = 'opacity 0.3s ease';
        setTimeout(() => {
            document.body.style.opacity = '1';
        }, 50);
    };
    
    link.onerror = function() {
        console.warn('⚠️ SmartFinanceAI CSS failed to load');
    };
    
    // Inject into head
    document.head.appendChild(link);
    
    // Add mobile viewport meta tag if missing
    if (!document.querySelector('meta[name="viewport"]')) {
        const viewport = document.createElement('meta');
        viewport.name = 'viewport';
        viewport.content = 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no';
        document.head.appendChild(viewport);
        console.log('✅ Mobile viewport meta tag added');
    }
    
    // Add PWA theme color if missing
    if (!document.querySelector('meta[name="theme-color"]')) {
        const themeColor = document.createElement('meta');
        themeColor.name = 'theme-color';
        themeColor.content = '#8b5cf6';
        document.head.appendChild(themeColor);
    }
    
})();
